{
    "name": "zephyr_ml.primitives.temporalfusiontransformermodel.TemporalFusionTransformer",
    "contributors": [
        "Brendon Reperttang <boom90lb@mit.edu>"
    ],
    "documentation": "https://pytorch-forecasting.readthedocs.io/en/stable/api/pytorch_forecasting.models.temporal_fusion_transformer.TemporalFusionTransformer.html",
    "description": "Implementation of the article Temporal Fusion Transformers for Interpretable Multi-horizon Time Series Forecasting. The network outperforms DeepAR by Amazon by 36-69% in benchmarks.",
    "classifiers": {
        "type": "estimator",
        "subtype": "regressor"
    },
    "modalities": [],
    "primitive": "zephyr_ml.primitives.temporalfusiontransformermodel.TemporalFusionTransformer",
    "fit": {
        "method": "fit",
        "args": [
            {
                "name": "train_dataloaders",
                "type": "DataLoader"
            },
            {
                "name": "val_dataloaders",
                "type": "DataLoader"
            },
            {
                "name": "model_path",
                "type": "str"
            }
        ]
    },
    "produce": {
        "method": "predict",
        "args": [
            {
                "name": "dataset",
                "type": "TimeSeriesDataSet"
            }
        ],
        "output": [
            {
                "name": "model",
                "type": "TemporalFusionTransformer"
            }
        ]
    },
    "hyperparameters": {
        "fixed": {
            "hidden_size": {
                "type": "int",
                "default": 256,
                "range": [
                    8,
                    512
                ]
            },
            "lstm_layers": {
                "type": "int",
                "default": 2
            },
            "output_size": {
                "type": "int",
                "default": 1
            }
        },
        "tunable": {
            "dropout": {
                "type": "float",
                "default": 0.75,
                "range": [
                    0,
                    1
                ]
            },
            "learning_rate": {
                "type": "float",
                "default": 0.01,
                "range": [
                    0,
                    1
                ]
            }
        }
    }
}
